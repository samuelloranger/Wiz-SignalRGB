"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UDPReqResClient = void 0;
var node_dgram_1 = require("node:dgram");
var UDPReqResClient = (function () {
    function UDPReqResClient(ip, port, requestTimeout, retryCount) {
        this.client = (0, node_dgram_1.createSocket)('udp4');
        this.ip = ip;
        this.port = port;
        this.requestTimeout = requestTimeout !== null && requestTimeout !== void 0 ? requestTimeout : 1000;
        this.retryCount = retryCount ? retryCount - 1 : 4;
        this.counter = 0;
    }
    UDPReqResClient.prototype.request = function (data) {
        var _this = this;
        this.counter = (this.counter % 1000) + 1;
        var dataWithId = __assign({ id: this.counter }, data);
        var dataToBeSend = Buffer.from(JSON.stringify(dataWithId));
        return this.withRetry(function () { return _this.basicRequest(dataToBeSend, _this.counter); }, this.retryCount);
    };
    UDPReqResClient.prototype.close = function () {
        this.client.close();
    };
    UDPReqResClient.prototype.withRetry = function (req_1) {
        return __awaiter(this, arguments, void 0, function (req, count, err) {
            var data, ex_1;
            if (count === void 0) { count = 0; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(count >= 0)) return [3, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, req()];
                    case 2:
                        data = _a.sent();
                        return [2, data];
                    case 3:
                        ex_1 = _a.sent();
                        console.log('Error', ex_1);
                        return [2, this.withRetry(req, count - 1, ex_1)];
                    case 4: return [3, 6];
                    case 5: return [2, Promise.reject(err)];
                    case 6: return [2];
                }
            });
        });
    };
    UDPReqResClient.prototype.basicRequest = function (data, reqId) {
        var _this = this;
        return new Promise(function (res, rej) {
            var timeoutId = setTimeout(function () { return onFailure('TIMEOUT'); }, _this.requestTimeout);
            var cleanup = function () {
                clearTimeout(timeoutId);
                _this.client.off('message', onMessage);
            };
            var onMessage = function (message) {
                var data = JSON.parse(message);
                if (data.id === reqId) {
                    res(data);
                    cleanup();
                }
            };
            var onFailure = function (reason) {
                rej(reason);
                cleanup();
            };
            _this.client.on('message', onMessage);
            _this.client.send(data, _this.port, _this.ip, function (err) {
                if (err) {
                    rej('ERROR');
                    console.error('Failed to send packet !!', err);
                }
                console.log('sent!!');
            });
        });
    };
    return UDPReqResClient;
}());
exports.UDPReqResClient = UDPReqResClient;
//# sourceMappingURL=udpReqResClient.js.map