"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UDPReqResClient = void 0;
const node_dgram_1 = require("node:dgram");
class UDPReqResClient {
    client;
    ip;
    port;
    requestTimeout;
    retryCount;
    counter;
    constructor(ip, port, requestTimeout, retryCount) {
        this.client = (0, node_dgram_1.createSocket)('udp4');
        this.ip = ip;
        this.port = port;
        this.requestTimeout = requestTimeout ?? 1000;
        this.retryCount = retryCount ? retryCount - 1 : 4;
        this.counter = 0;
    }
    request(data) {
        this.counter = (this.counter % 1000) + 1;
        const dataWithId = {
            id: this.counter,
            ...data
        };
        const dataToBeSend = Buffer.from(JSON.stringify(dataWithId));
        return this.withRetry(() => this.basicRequest(dataToBeSend, this.counter), this.retryCount);
    }
    close() {
        this.client.close();
    }
    async withRetry(req, count = 0, err) {
        if (count >= 0) {
            try {
                const data = await req();
                return data;
            }
            catch (ex) {
                console.log('Error', ex);
                return this.withRetry(req, count - 1, ex);
            }
        }
        else {
            return Promise.reject(err);
        }
    }
    basicRequest(data, reqId) {
        return new Promise((res, rej) => {
            const timeoutId = setTimeout(() => onFailure('TIMEOUT'), this.requestTimeout);
            const cleanup = () => {
                clearTimeout(timeoutId);
                this.client.off('message', onMessage);
            };
            const onMessage = (message) => {
                const data = JSON.parse(message);
                if (data.id === reqId) {
                    res(data);
                    cleanup();
                }
            };
            const onFailure = (reason) => {
                rej(reason);
                cleanup();
            };
            this.client.on('message', onMessage);
            this.client.send(data, this.port, this.ip, (err) => {
                if (err) {
                    rej('ERROR');
                    console.error('Failed to send packet !!', err);
                }
                console.log('sent!!');
            });
        });
    }
}
exports.UDPReqResClient = UDPReqResClient;
//# sourceMappingURL=udpReqResClient.js.map